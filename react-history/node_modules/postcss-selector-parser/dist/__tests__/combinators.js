"use strict";

var _types = require("../selectors/types");

var _helpers = require("./util/helpers");

(0, _helpers.test)('multiple combinating spaces', 'h1         h2', function (t, tree) {
  t.deepEqual(tree.nodes[0].nodes[0].value, 'h1');
  t.deepEqual(tree.nodes[0].nodes[1].value, ' ');
  t.deepEqual(tree.nodes[0].nodes[1].toString(), '         ');
  t.deepEqual(tree.nodes[0].nodes[2].value, 'h2');
});
(0, _helpers.test)('column combinator', '.selected||td', function (t, tree) {
  t.deepEqual(tree.nodes[0].nodes[0].value, 'selected');
  t.deepEqual(tree.nodes[0].nodes[1].value, '||');
  t.deepEqual(tree.nodes[0].nodes[2].value, 'td');
});
(0, _helpers.test)('column combinator (2)', '.selected || td', function (t, tree) {
  t.deepEqual(tree.nodes[0].nodes[0].value, 'selected');
  t.deepEqual(tree.nodes[0].nodes[1].spaces.before, ' ');
  t.deepEqual(tree.nodes[0].nodes[1].value, '||');
  t.deepEqual(tree.nodes[0].nodes[1].spaces.after, ' ');
  t.deepEqual(tree.nodes[0].nodes[2].value, 'td');
});
(0, _helpers.test)('descendant combinator', 'h1 h2', function (t, tree) {
  t.deepEqual(tree.nodes[0].nodes[0].value, 'h1');
  t.deepEqual(tree.nodes[0].nodes[1].value, ' ');
  t.deepEqual(tree.nodes[0].nodes[2].value, 'h2');
});
(0, _helpers.test)('multiple descendant combinators', 'h1 h2 h3 h4', function (t, tree) {
  t.deepEqual(tree.nodes[0].nodes[1].value, ' ', 'should have a combinator');
  t.deepEqual(tree.nodes[0].nodes[3].value, ' ', 'should have a combinator');
  t.deepEqual(tree.nodes[0].nodes[5].value, ' '